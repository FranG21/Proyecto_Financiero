/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Controlador.ControladorAmortizacion;
import Controlador.ControladorCliente;
import Controlador.ControladorPrestamo;
import Modelo.Amortizacion;
import Modelo.Cliente;
import Modelo.Prestamo;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jose
 */
public class ListaClientes extends javax.swing.JFrame {

    /**
     * Creates new form ListaClitenesNaturales
     */
    DefaultTableModel modelo;
    ControladorCliente controladorCliente;
    ArrayList<Cliente> listaCliente;
    Cliente objeto;
    int posicion = -1;

    Date fechaActual;
    ControladorPrestamo controladorPrestamo;
    ArrayList<Prestamo> listaPrestamo;
    ControladorAmortizacion controladorAmortizacion;
    ArrayList<Amortizacion> listaAmortizacion;

    long finMS = 0;
    long inicioMS = 0;
    int diferencia = 0;
    int bandera = 0;

    public ListaClientes() {
        initComponents();
        setLocationRelativeTo(null);
        modelo();

        controladorCliente = new ControladorCliente();
        controladorPrestamo = new ControladorPrestamo();
        controladorAmortizacion = new ControladorAmortizacion();

        fechaActual = new Date();
        listaCliente = new ArrayList<>();
        listaCliente = controladorCliente.obtenerLista();
        actualizarCarteras();

        verTabla();
        this.addWindowListener(new WindowListener() {
            @Override
            public void windowOpened(WindowEvent e) {
                //actualizarCarteras();
                verTabla();
            }

            @Override
            public void windowClosing(WindowEvent e) {
            }

            @Override
            public void windowClosed(WindowEvent e) {
            }

            @Override
            public void windowIconified(WindowEvent e) {
            }

            @Override
            public void windowDeiconified(WindowEvent e) {
            }

            @Override
            public void windowActivated(WindowEvent e) {
                //actualizarCarteras();
                verTabla();
            }

            @Override
            public void windowDeactivated(WindowEvent e) {
            }
        });
        Tabla.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                Ver(e); //To change body of generated methods, choose Tools | Templates.
            }

        });
    }

    private void modelo() {

        modelo = new DefaultTableModel();
        modelo.addColumn("NÂ°");
        modelo.addColumn("NIT");
        modelo.addColumn("NOMBRE");
        modelo.addColumn("OCUPACION O GIRO");
        modelo.addColumn("DEPARTAMENTO");
        modelo.addColumn("TIPO");
        Tabla.setModel(modelo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        comboCartera = new javax.swing.JComboBox<>();
        comboSelecione = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        BtnVer = new javax.swing.JButton();
        BtnModifica = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        btnEstado = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        comboClase = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(950, 660));
        setMinimumSize(new java.awt.Dimension(950, 660));
        setPreferredSize(new java.awt.Dimension(930, 690));
        getContentPane().setLayout(null);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("LISTA DE CLIENTES");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 20, 400, 70);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("ESTADO");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(570, 20, 70, 30);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("CARTERA");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(750, 20, 80, 30);

        comboCartera.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TODOS LOS CLIENTES", "NORMALES", "MOROSOS", "INCOBRABLES" }));
        comboCartera.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboCarteraItemStateChanged(evt);
            }
        });
        comboCartera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCarteraActionPerformed(evt);
            }
        });
        getContentPane().add(comboCartera);
        comboCartera.setBounds(710, 50, 180, 40);

        comboSelecione.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECCIONE", "ACTIVO", "INACTIVO" }));
        comboSelecione.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboSelecioneItemStateChanged(evt);
            }
        });
        comboSelecione.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSelecioneActionPerformed(evt);
            }
        });
        getContentPane().add(comboSelecione);
        comboSelecione.setBounds(530, 50, 140, 40);

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Tabla);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(90, 200, 790, 380);

        BtnVer.setBackground(new java.awt.Color(0, 153, 0));
        BtnVer.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        BtnVer.setForeground(new java.awt.Color(255, 255, 255));
        BtnVer.setText("VER");
        BtnVer.setEnabled(false);
        BtnVer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnVerActionPerformed(evt);
            }
        });
        getContentPane().add(BtnVer);
        BtnVer.setBounds(140, 130, 90, 30);

        BtnModifica.setBackground(new java.awt.Color(255, 153, 0));
        BtnModifica.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        BtnModifica.setForeground(new java.awt.Color(255, 255, 255));
        BtnModifica.setText("MODIFICAR");
        BtnModifica.setEnabled(false);
        BtnModifica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnModificaActionPerformed(evt);
            }
        });
        getContentPane().add(BtnModifica);
        BtnModifica.setBounds(290, 130, 120, 30);

        jButton3.setBackground(new java.awt.Color(0, 51, 255));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("NUEVO CLIENTE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(450, 130, 180, 30);

        btnEstado.setBackground(new java.awt.Color(204, 0, 0));
        btnEstado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnEstado.setForeground(new java.awt.Color(255, 255, 255));
        btnEstado.setText("DAR DE BAJA");
        btnEstado.setEnabled(false);
        btnEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEstadoActionPerformed(evt);
            }
        });
        getContentPane().add(btnEstado);
        btnEstado.setBounds(650, 130, 120, 30);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("CLASE");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(390, 20, 70, 30);

        comboClase.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECIONE", "A", "B", "C" }));
        comboClase.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboClaseItemStateChanged(evt);
            }
        });
        comboClase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboClaseActionPerformed(evt);
            }
        });
        getContentPane().add(comboClase);
        comboClase.setBounds(350, 50, 140, 40);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bitcoin_1600x900_10536.jpg"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, -60, 970, 770);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnVerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnVerActionPerformed
        // TODO add your handling code here:
        DetalleCliente vista = new DetalleCliente(objeto);
        vista.setVisible(true);
    }//GEN-LAST:event_BtnVerActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        RegistrarClientes vista = new RegistrarClientes();
        vista.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void comboSelecioneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSelecioneActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_comboSelecioneActionPerformed

    private void comboCarteraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCarteraActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_comboCarteraActionPerformed

    private void comboSelecioneItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboSelecioneItemStateChanged
        // TODO add your handling code here:
        if (comboSelecione.getSelectedIndex() == 0) {
            verTablaX();
        } else if (comboSelecione.getSelectedIndex() == 1) {
            verTablaCondicionada(1);
        } else if (comboSelecione.getSelectedIndex() == 2) {
            verTablaCondicionada(0);
        }
    }//GEN-LAST:event_comboSelecioneItemStateChanged

    private void comboCarteraItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboCarteraItemStateChanged
        // TODO add your handling code here:
        if (comboCartera.getSelectedIndex() == 0) {
            verTablaY();
        } else if (comboCartera.getSelectedIndex() == 1) {
            verTablaCondicionadaCarteras(0);
        } else if (comboCartera.getSelectedIndex() == 2) {
            verTablaCondicionadaCarteras(1);
        } else if (comboCartera.getSelectedIndex() == 3) {
            verTablaCondicionadaCarteras(2);
        }
    }//GEN-LAST:event_comboCarteraItemStateChanged

    private void BtnModificaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnModificaActionPerformed
        // TODO add your handling code here:
        ModificarClientes vista = new ModificarClientes(objeto);
        vista.setVisible(true);
    }//GEN-LAST:event_BtnModificaActionPerformed

    private void btnEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEstadoActionPerformed
        // TODO add your handling code here:
        if (objeto.getEstado() == 0) {
            if (controladorCliente.ModificarEstado(1, objeto.getId())) {
                verTabla();
                objeto.setEstado(1);
                btnEstado.setBackground(Color.RED);
                btnEstado.setText("DAR DE BAJA");
                JOptionPane.showMessageDialog(null, "REGISTRO DADO DE ALTA", "EXITOSO", JOptionPane.INFORMATION_MESSAGE);
            } else {

            }

        } else {
            if (controladorCliente.ModificarEstado(0, objeto.getId())) {
                verTabla();
                objeto.setEstado(0);
                btnEstado.setBackground(Color.GREEN);
                btnEstado.setText("DAR DE ALTA");
                JOptionPane.showMessageDialog(null, "REGISTRO DADO DE BAJA", "EXITOSO", JOptionPane.INFORMATION_MESSAGE);
            } else {
            }
        }
    }//GEN-LAST:event_btnEstadoActionPerformed

    private void comboClaseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboClaseItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_comboClaseItemStateChanged

    private void comboClaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboClaseActionPerformed
        // TODO add your handling code here:
        if (comboClase.getSelectedIndex() == 1) {
            verTablaClaseA();
        } else if (comboClase.getSelectedIndex() == 2) {
            verTablaClaseB();
        } else if (comboClase.getSelectedIndex() == 3) {
            verTablaClaseC();
        }
    }//GEN-LAST:event_comboClaseActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnModifica;
    private javax.swing.JButton BtnVer;
    private javax.swing.JTable Tabla;
    private javax.swing.JButton btnEstado;
    private javax.swing.JComboBox<String> comboCartera;
    private javax.swing.JComboBox<String> comboClase;
    private javax.swing.JComboBox<String> comboSelecione;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void Ver(MouseEvent e) {
        int row = Tabla.rowAtPoint(e.getPoint());
        posicion = Integer.parseInt(Tabla.getValueAt(row, 0).toString());
        objeto = new Cliente();
        objeto = listaCliente.get(posicion - 1);
        BtnVer.setEnabled(true);
        BtnModifica.setEnabled(true);
        btnEstado.setEnabled(true);
        if (objeto.getEstado() == 0) {
            btnEstado.setBackground(Color.GREEN);
            btnEstado.setText("DAR DE ALTA");

        } else {
            btnEstado.setBackground(Color.RED);
            btnEstado.setText("DAR DE BAJA");
        }
    }

    void verTabla() {
        //objeto = new Categoria();
        //listaCliente = new ArrayList<>();
        //listaCliente = controladorCliente.obtenerLista();

        modelo.setRowCount(listaCliente.size());

        for (int i = 0; i < listaCliente.size(); i++) {

            modelo.setValueAt(i + 1, i, 0);
            modelo.setValueAt(listaCliente.get(i).getNit(), i, 1);
            if (listaCliente.get(i).getTipo() == 0) {
                modelo.setValueAt(listaCliente.get(i).getNombre() + " " + listaCliente.get(i).getApellidos_Representante(), i, 2);
            } else {
                modelo.setValueAt(listaCliente.get(i).getNombre(), i, 2);
            }
            modelo.setValueAt(listaCliente.get(i).getOcupacion(), i, 3);
            modelo.setValueAt(listaCliente.get(i).getDepartmento(), i, 4);
            if (listaCliente.get(i).getTipo() == 0) {
                modelo.setValueAt("PERSONA NATURAL", i, 5);
            } else {
                modelo.setValueAt("PERSONA JURIDICA", i, 5);
            }
        }
        Tabla.setModel(modelo);
    }

    void verTablaClaseA() {
        //objeto = new Categoria();
        listaCliente = new ArrayList<>();
        listaCliente = controladorCliente.obtenerListaClaseA();

        modelo.setRowCount(listaCliente.size());

        for (int i = 0; i < listaCliente.size(); i++) {

            modelo.setValueAt(i + 1, i, 0);
            modelo.setValueAt(listaCliente.get(i).getNit(), i, 1);
            if (listaCliente.get(i).getTipo() == 0) {
                modelo.setValueAt(listaCliente.get(i).getNombre() + " " + listaCliente.get(i).getApellidos_Representante(), i, 2);
            } else {
                modelo.setValueAt(listaCliente.get(i).getNombre(), i, 2);
            }
            modelo.setValueAt(listaCliente.get(i).getOcupacion(), i, 3);
            modelo.setValueAt(listaCliente.get(i).getDepartmento(), i, 4);
            if (listaCliente.get(i).getTipo() == 0) {
                modelo.setValueAt("PERSONA NATURAL", i, 5);
            } else {
                modelo.setValueAt("PERSONA JURIDICA", i, 5);
            }
        }
        Tabla.setModel(modelo);
    }

    void verTablaClaseB() {
        //objeto = new Categoria();
        listaCliente = new ArrayList<>();
        listaCliente = controladorCliente.obtenerListaClaseB();

        modelo.setRowCount(listaCliente.size());

        for (int i = 0; i < listaCliente.size(); i++) {

            modelo.setValueAt(i + 1, i, 0);
            modelo.setValueAt(listaCliente.get(i).getNit(), i, 1);
            if (listaCliente.get(i).getTipo() == 0) {
                modelo.setValueAt(listaCliente.get(i).getNombre() + " " + listaCliente.get(i).getApellidos_Representante(), i, 2);
            } else {
                modelo.setValueAt(listaCliente.get(i).getNombre(), i, 2);
            }
            modelo.setValueAt(listaCliente.get(i).getOcupacion(), i, 3);
            modelo.setValueAt(listaCliente.get(i).getDepartmento(), i, 4);
            if (listaCliente.get(i).getTipo() == 0) {
                modelo.setValueAt("PERSONA NATURAL", i, 5);
            } else {
                modelo.setValueAt("PERSONA JURIDICA", i, 5);
            }
        }
        Tabla.setModel(modelo);
    }

    void verTablaClaseC() {
        //objeto = new Categoria();
        listaCliente = new ArrayList<>();
        listaCliente = controladorCliente.obtenerListaClaseC();

        modelo.setRowCount(listaCliente.size());

        for (int i = 0; i < listaCliente.size(); i++) {

            modelo.setValueAt(i + 1, i, 0);
            modelo.setValueAt(listaCliente.get(i).getNit(), i, 1);
            if (listaCliente.get(i).getTipo() == 0) {
                modelo.setValueAt(listaCliente.get(i).getNombre() + " " + listaCliente.get(i).getApellidos_Representante(), i, 2);
            } else {
                modelo.setValueAt(listaCliente.get(i).getNombre(), i, 2);
            }
            modelo.setValueAt(listaCliente.get(i).getOcupacion(), i, 3);
            modelo.setValueAt(listaCliente.get(i).getDepartmento(), i, 4);
            if (listaCliente.get(i).getTipo() == 0) {
                modelo.setValueAt("PERSONA NATURAL", i, 5);
            } else {
                modelo.setValueAt("PERSONA JURIDICA", i, 5);
            }
        }
        Tabla.setModel(modelo);
    }

    private void actualizarCarteras() {

        for (int j = 0; j < listaCliente.size(); j++) {
            //JOptionPane.showConfirmDialog(null, ""+listaCliente.get(j).getId());
            actualizarCarteras1(listaCliente.get(j));
        }
    }

    private void actualizarCarteras1(Cliente cli) {
        //JOptionPane.showMessageDialog(null, "ID CLIENTE: " + cli.getId());
        listaPrestamo = new ArrayList<>();

        listaPrestamo = controladorPrestamo.obtenerLista(cli.getId());
        if (listaPrestamo.isEmpty()) {
            //JOptionPane.showMessageDialog(null, "NULO: ");
        } else {
            // JOptionPane.showMessageDialog(null, "ID PRESTAMO: " + listaPrestamo.get(0).getId());
            if (listaPrestamo.get(0).getEstado() == 1) {
                //JOptionPane.showMessageDialog(null, "PAGADO");
            } else {
                actualizarCartera2(listaPrestamo.get(0), cli);
            }

        }
        listaPrestamo = new ArrayList<>();
    }

    private void actualizarCartera2(Prestamo pre, Cliente cli) {
        Amortizacion amor = null;
        listaAmortizacion = new ArrayList<>();
        //controladorAmortizacion=new ControladorAmortizacion();
        listaAmortizacion = controladorAmortizacion.obtenerListaConDias(pre.getId());

        for (int k = 0; k < listaAmortizacion.size(); k++) {
            if (listaAmortizacion.get(k).getEstado() == 0 && listaAmortizacion.get(k).getDiferenciaDias() <= 0) {
                amor = listaAmortizacion.get(k);
                amor.setMora(1);
                listaAmortizacion.set(k, amor);
                controladorAmortizacion.ModificarMora(listaAmortizacion.get(k).getId());
            } else {
                //JOptionPane.showMessageDialog(null, "CUOTA");
            }
        }

        for (int l = 0; l < listaAmortizacion.size(); l++) {
            if (listaAmortizacion.get(l).getMora() == 1 && listaAmortizacion.get(l).getDiferenciaDias() <= 0) {
                bandera++;
            }
        }

        if (bandera > 3 && cli.getCartera() != 2) {
            controladorCliente.ModificarCarteraEstado(2, cli.getId());
        } else {
            if (bandera > 0 && cli.getCartera() == 0) {
                JOptionPane.showMessageDialog(null, "" + cli.getId());

                controladorCliente.ModificarCartera(1, cli.getId());
            } else {
                //JOptionPane.showMessageDialog(null, "CLIENTE SANO");
            }
        }

        bandera = 0;
        listaAmortizacion = new ArrayList<>();
    }

    private void verTablaCondicionada(int estado) {
        listaCliente = new ArrayList<>();
        listaCliente = controladorCliente.obtenerListaCondicionada(estado);

        modelo.setRowCount(listaCliente.size());

        for (int i = 0; i < listaCliente.size(); i++) {

            modelo.setValueAt(i + 1, i, 0);
            modelo.setValueAt(listaCliente.get(i).getNit(), i, 1);
            if (listaCliente.get(i).getTipo() == 0) {
                modelo.setValueAt(listaCliente.get(i).getNombre() + " " + listaCliente.get(i).getApellidos_Representante(), i, 2);
            } else {
                modelo.setValueAt(listaCliente.get(i).getNombre(), i, 2);
            }
            modelo.setValueAt(listaCliente.get(i).getOcupacion(), i, 3);
            modelo.setValueAt(listaCliente.get(i).getDepartmento(), i, 4);
            if (listaCliente.get(i).getTipo() == 0) {
                modelo.setValueAt("PERSONA NATURAL", i, 5);
            } else {
                modelo.setValueAt("PERSONA JURIDICA", i, 5);
            }
        }
        Tabla.setModel(modelo);
    }

    private void verTablaCondicionadaCarteras(int estado) {
        listaCliente = new ArrayList<>();
        listaCliente = controladorCliente.obtenerListaCondicionadaCartera(estado);

        modelo.setRowCount(listaCliente.size());

        modelo.setRowCount(listaCliente.size());

        for (int i = 0; i < listaCliente.size(); i++) {

            modelo.setValueAt(i + 1, i, 0);
            modelo.setValueAt(listaCliente.get(i).getNit(), i, 1);
            if (listaCliente.get(i).getTipo() == 0) {
                modelo.setValueAt(listaCliente.get(i).getNombre() + " " + listaCliente.get(i).getApellidos_Representante(), i, 2);
            } else {
                modelo.setValueAt(listaCliente.get(i).getNombre(), i, 2);
            }
            modelo.setValueAt(listaCliente.get(i).getOcupacion(), i, 3);
            modelo.setValueAt(listaCliente.get(i).getDepartmento(), i, 4);
            if (listaCliente.get(i).getTipo() == 0) {
                modelo.setValueAt("PERSONA NATURAL", i, 5);
            } else {
                modelo.setValueAt("PERSONA JURIDICA", i, 5);
            }
        }
        Tabla.setModel(modelo);
    }

    private void verTablaX() {
        listaCliente = new ArrayList<>();
        listaCliente = controladorCliente.obtenerLista();

        modelo.setRowCount(listaCliente.size());

        modelo.setRowCount(listaCliente.size());

        for (int i = 0; i < listaCliente.size(); i++) {

            modelo.setValueAt(i + 1, i, 0);
            modelo.setValueAt(listaCliente.get(i).getNit(), i, 1);
            if (listaCliente.get(i).getTipo() == 0) {
                modelo.setValueAt(listaCliente.get(i).getNombre() + " " + listaCliente.get(i).getApellidos_Representante(), i, 2);
            } else {
                modelo.setValueAt(listaCliente.get(i).getNombre(), i, 2);
            }
            modelo.setValueAt(listaCliente.get(i).getOcupacion(), i, 3);
            modelo.setValueAt(listaCliente.get(i).getDepartmento(), i, 4);
            if (listaCliente.get(i).getTipo() == 0) {
                modelo.setValueAt("PERSONA NATURAL", i, 5);
            } else {
                modelo.setValueAt("PERSONA JURIDICA", i, 5);
            }
        }
        Tabla.setModel(modelo);
    }

    private void verTablaY() {
        listaCliente = new ArrayList<>();
        listaCliente = controladorCliente.obtenerLista();

        modelo.setRowCount(listaCliente.size());

        modelo.setRowCount(listaCliente.size());

        for (int i = 0; i < listaCliente.size(); i++) {

            modelo.setValueAt(i + 1, i, 0);
            modelo.setValueAt(listaCliente.get(i).getNit(), i, 1);
            if (listaCliente.get(i).getTipo() == 0) {
                modelo.setValueAt(listaCliente.get(i).getNombre() + " " + listaCliente.get(i).getApellidos_Representante(), i, 2);
            } else {
                modelo.setValueAt(listaCliente.get(i).getNombre(), i, 2);
            }
            modelo.setValueAt(listaCliente.get(i).getOcupacion(), i, 3);
            modelo.setValueAt(listaCliente.get(i).getDepartmento(), i, 4);
            if (listaCliente.get(i).getTipo() == 0) {
                modelo.setValueAt("PERSONA NATURAL", i, 5);
            } else {
                modelo.setValueAt("PERSONA JURIDICA", i, 5);
            }
        }
        Tabla.setModel(modelo);
    }

}
