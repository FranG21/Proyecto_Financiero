/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Controlador.ControladorDepreciacion;
import Modelo.Activo;
import Modelo.Depreciacion;
import Modelo.DepreciacionAcumulada;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jose
 */
public class Depreciar extends javax.swing.JFrame {

    /**
     * Creates new form ListaClitenesNaturales
     */
    DefaultTableModel modelo;
    Activo activo;
    Depreciacion depreciacion;
    ControladorDepreciacion controladorDepreciacion;
    ArrayList<DepreciacionAcumulada> listaDepreciacion;
    DecimalFormat format;
    Double d;

    public Depreciar(Activo p) {
        initComponents();
        setLocationRelativeTo(null);
        modelo();
        activo = p;
        controladorDepreciacion = new ControladorDepreciacion();
        depreciacion = controladorDepreciacion.obtenerObjeto(activo.getId());
        format = new DecimalFormat("00.00");
        d = (depreciacion.getP() - depreciacion.getP() * (1 / depreciacion.getPorcentajeL())) / depreciacion.getN();
        jLabel2.setText("VALOR EN LIBROS: $"+format.format(depreciacion.getP())+"          DEPRECIACION ANUAL: $"+format.format(d));
        llenarTabla();
    }

    private void modelo() {

        modelo = new DefaultTableModel();
        modelo.addColumn("AÑO-MES-DIA");
        modelo.addColumn("CUOTA A DEPRECIAR");
        modelo.addColumn("DEPRECIACION ACUMULADA");
        modelo.addColumn("VALOR EN LIBROS");

        Tabla.setModel(modelo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        BtnVer = new javax.swing.JButton();
        BtnVer2 = new javax.swing.JButton();
        BtnVer3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(950, 660));
        getContentPane().setLayout(null);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("DEPRECIACION DE ACTIVO FIJO");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(90, 80, 750, 70);

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Tabla);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(90, 200, 790, 380);

        BtnVer.setBackground(new java.awt.Color(0, 153, 0));
        BtnVer.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        BtnVer.setForeground(new java.awt.Color(255, 255, 255));
        BtnVer.setText("MES");
        BtnVer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnVerActionPerformed(evt);
            }
        });
        getContentPane().add(BtnVer);
        BtnVer.setBounds(190, 160, 90, 30);

        BtnVer2.setBackground(new java.awt.Color(0, 153, 0));
        BtnVer2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        BtnVer2.setForeground(new java.awt.Color(255, 255, 255));
        BtnVer2.setText("DIA");
        BtnVer2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnVer2ActionPerformed(evt);
            }
        });
        getContentPane().add(BtnVer2);
        BtnVer2.setBounds(300, 160, 90, 30);

        BtnVer3.setBackground(new java.awt.Color(0, 153, 0));
        BtnVer3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        BtnVer3.setForeground(new java.awt.Color(255, 255, 255));
        BtnVer3.setText("AÑO");
        BtnVer3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnVer3ActionPerformed(evt);
            }
        });
        getContentPane().add(BtnVer3);
        BtnVer3.setBounds(90, 160, 90, 30);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("DEPRECIACION DE ACTIVO FIJO");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(290, 20, 400, 70);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bitcoin_1600x900_10536.jpg"))); // NOI18N
        jLabel1.setText("SAFJKSDKFJSDFNJNKSFJNKDFJNKJNK");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, -60, 970, 770);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnVerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnVerActionPerformed
        // TODO add your handling code here:
        d = (depreciacion.getP() - depreciacion.getP() * (1 / depreciacion.getPorcentajeL())) / depreciacion.getN();
        d = d / 12;
        jLabel2.setText("VALOR EN LIBROS: $"+format.format(depreciacion.getP())+"          DEPRECIACION MENSUAL: $"+format.format(d));
        modelo();
        llenarTablaMes();
    }//GEN-LAST:event_BtnVerActionPerformed

    private void BtnVer2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnVer2ActionPerformed
        // TODO add your handling code here:
        d = (depreciacion.getP() - depreciacion.getP() * (1 / depreciacion.getPorcentajeL())) / depreciacion.getN();
        d = d / 365;
        jLabel2.setText("VALOR EN LIBROS: $"+format.format(depreciacion.getP())+"          DEPRECIACION DIARIA: $"+format.format(d));
        modelo();
        llenarTablaDia();
    }//GEN-LAST:event_BtnVer2ActionPerformed

    private void BtnVer3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnVer3ActionPerformed
        // TODO add your handling code here:
        d = (depreciacion.getP() - depreciacion.getP() * (1 / depreciacion.getPorcentajeL())) / depreciacion.getN();
        jLabel2.setText("VALOR EN LIBROS: $"+format.format(depreciacion.getP())+"          DEPRECIACION ANUAL: $"+format.format(d));
        modelo();
        llenarTabla();
    }//GEN-LAST:event_BtnVer3ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnVer;
    private javax.swing.JButton BtnVer2;
    private javax.swing.JButton BtnVer3;
    private javax.swing.JTable Tabla;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void llenarTabla() {
        listaDepreciacion = new ArrayList<>();
        listaDepreciacion = obtenerLista();

        modelo.setRowCount(listaDepreciacion.size());

        for (int i = 0; i < listaDepreciacion.size(); i++) {

            modelo.setValueAt(listaDepreciacion.get(i).getNumeroAnio(), i, 0);
            modelo.setValueAt(format.format(listaDepreciacion.get(i).getDepreciacionAnual()), i, 1);
            modelo.setValueAt(format.format(listaDepreciacion.get(i).getDepreciacionAcumulada()), i, 2);
            modelo.setValueAt(format.format(listaDepreciacion.get(i).getValorLibros()), i, 3);
        }

        Tabla.setModel(modelo);
    }

    private void llenarTablaMes() {
        listaDepreciacion = new ArrayList<>();
        listaDepreciacion = obtenerListaCondicionada(12);

        modelo.setRowCount(listaDepreciacion.size());

        for (int i = 0; i < listaDepreciacion.size(); i++) {

            modelo.setValueAt(listaDepreciacion.get(i).getNumeroAnio(), i, 0);
            modelo.setValueAt(format.format(listaDepreciacion.get(i).getDepreciacionAnual()), i, 1);
            modelo.setValueAt(format.format(listaDepreciacion.get(i).getDepreciacionAcumulada()), i, 2);
            modelo.setValueAt(format.format(listaDepreciacion.get(i).getValorLibros()), i, 3);
        }

        Tabla.setModel(modelo);
    }

    private void llenarTablaDia() {
        listaDepreciacion = new ArrayList<>();
        listaDepreciacion = obtenerListaCondicionada(365);

        modelo.setRowCount(listaDepreciacion.size());

        for (int i = 0; i < listaDepreciacion.size(); i++) {

            modelo.setValueAt(listaDepreciacion.get(i).getNumeroAnio(), i, 0);
            modelo.setValueAt(format.format(listaDepreciacion.get(i).getDepreciacionAnual()), i, 1);
            modelo.setValueAt(format.format(listaDepreciacion.get(i).getDepreciacionAcumulada()), i, 2);
            modelo.setValueAt(format.format(listaDepreciacion.get(i).getValorLibros()), i, 3);
        }

        Tabla.setModel(modelo);
    }

    private ArrayList<DepreciacionAcumulada> obtenerLista() {
        ArrayList<DepreciacionAcumulada> lista = new ArrayList<>();
        Double d;
        Double acumulada = 0.0;
        Double valorLibro = 0.0;
        d = (depreciacion.getP() - depreciacion.getP() * (1 / depreciacion.getPorcentajeL())) / depreciacion.getN();

        for (int i = 1; i <= depreciacion.getN(); i++) {
            acumulada = acumulada + d;
            valorLibro = depreciacion.getP() - acumulada;
            lista.add(new DepreciacionAcumulada(i, d, acumulada, valorLibro));
        }

        return lista;
    }

    private ArrayList<DepreciacionAcumulada> obtenerListaCondicionada(int var) {
        ArrayList<DepreciacionAcumulada> lista = new ArrayList<>();
        Double acumulada = 0.0;
        Double valorLibro = 0.0;
        d = (depreciacion.getP() - depreciacion.getP() * (1 / depreciacion.getPorcentajeL())) / depreciacion.getN();
        d = d / var;

        for (int i = 1; i <= depreciacion.getN() * var; i++) {
            acumulada = acumulada + d;
            valorLibro = depreciacion.getP() - acumulada;
            lista.add(new DepreciacionAcumulada(i, d, acumulada, valorLibro));
        }

        return lista;
    }
}
